{"version":3,"sources":["Validation/index.js","components/LoginForm/index.js","App/index.js","index.js"],"names":["requiredInput","input","undefined","matchInput","allInputs","password","myInput","props","type","placeholder","meta","error","touched","LoginForm","handleSubmit","this","className","onSubmit","Field","component","name","validate","label","Component","reduxForm","form","App","submit","includes","username","SubmissionError","console","log","JSON","stringify","window","alert","initialValues","getInitialValues","reducers","formReducer","reducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"mMAYeA,EAAgB,SAACC,GAAD,OAC7BA,OAAQC,EAAH,mFAKQC,EAAa,SAACF,EAAOG,GAAR,OAAqBH,IAAUG,EAAUC,cAAWH,EAAY,4G,OCbtFI,EAAU,SAACC,GACwBA,EAAhCN,MAAgCM,EAAzBC,KAAyBD,EAAnBE,YADK,IACQC,EAAMH,EAANG,KACjC,OACI,eAAC,WAAD,WACA,iDAAWH,EAAMN,OAAjB,IAAwBO,KAAMD,EAAMC,KAAMC,YAAaF,EAAME,eAE5DC,EAAKC,OACND,EAAKE,SACL,8BACGF,EAAKC,YAMRE,E,4JACJ,WAAW,IACFC,EAAgBC,KAAKR,MAArBO,aACP,OACE,uBAAME,UAAU,OAAOC,SAAUH,EAAjC,UACE,cAACI,EAAA,EAAD,CAAOF,UAAU,aACfG,UAAWb,EACXc,KAAK,WACLZ,KAAK,OACLC,YAAY,wFAEZY,SAAU,CAACrB,KAEb,cAACkB,EAAA,EAAD,CAAOF,UAAU,aACfG,UAAWb,EACXc,KAAK,WACLZ,KAAK,WACLC,YAAY,uCACZY,SAAU,CAACrB,KAEb,cAACkB,EAAA,EAAD,CAAOF,UAAU,aACfG,UAAWb,EACXc,KAAK,mBACLZ,KAAK,WACLC,YAAY,0GACZY,SAAU,CAACrB,EAAeG,KAE5B,wBAAQa,UAAU,cAAcR,KAAK,SAASc,MAAM,SAApD,6C,GA3BgBC,aAqCTV,EAJfA,EAAYW,YAAW,CACrBC,KAAM,SADID,CAERX,G,QClBWa,E,4MA7BbC,OAAS,SAAA1B,GACP,GAAG,CAAC,iCAAS,2BAAQ,2BAAQ,kCAAS2B,SAAU3B,EAAM4B,UACpD,MAAM,IAAIC,IAAiB,CACzBD,SAAW,gLAGbE,QAAQC,IAAIC,KAAKC,UAAUjC,IAC3BkC,OAAOC,MAAOH,KAAKC,UAAUjC,K,sDAIjC,WACE,MAAO,CACL4B,SAAU,GACVxB,SAAU,M,oBAGd,WACE,OACE,eAAC,WAAD,WACE,oBAAIW,UAAU,SAAd,wBACA,cAAC,EAAD,CAAWC,SAAUF,KAAKY,OACzBU,cAAetB,KAAKuB,4B,GA1BXf,a,eCIZgB,EAAW,CAACd,K,OAAMe,GAClBC,EAAUC,YAAgBH,GAC5BI,EAAQC,YAAYH,GACxBI,IAASC,OACP,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFI,SAASC,eAAe,U","file":"static/js/main.d214947e.chunk.js","sourcesContent":["/* export const validate = inputs => {\r\n    const errors = {};\r\n    if (!inputs.username) {\r\n      errors.username = 'Введите имя пользователя';\r\n    } else if (inputs.username !== 'Юрчик') {\r\n      errors.username = 'Имя пользователя неверно';\r\n    }\r\n    if (!inputs.password) {\r\n      errors.password = 'Введите ваш пароль';\r\n    }\r\n    return errors;\r\n  }; */\r\n  export const requiredInput = (input) =>\r\n  input ? undefined : `Требуется ввод`;\r\n\r\nexport const correctInput = input =>\r\n  input !== 'Alina' ? 'Неправильное имя пользователя' : undefined;\r\n\r\n  export const matchInput = (input, allInputs) =>input === allInputs.password ? undefined : 'Пароль не совпадает';","\r\nimport React, {Component, Fragment} from 'react';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {requiredInput, correctInput, matchInput} from '../../Validation';\r\n\r\nconst myInput = (props) =>{\r\n  const {input, type, placeholder, meta}=props;\r\n  return (\r\n      <Fragment>\r\n      <input {...props.input} type={props.type} placeholder={props.placeholder}/>\r\n\r\n      {meta.error &&\r\n      meta.touched &&\r\n      <div>\r\n        {meta.error}\r\n      </div>}\r\n      </Fragment>\r\n  )\r\n}\r\n\r\nclass LoginForm extends Component {\r\n  render () {\r\n    const {handleSubmit} = this.props;\r\n    return (\r\n      <form className='form' onSubmit={handleSubmit}>\r\n        <Field className='form_title'\r\n          component={myInput}\r\n          name=\"username\"\r\n          type=\"text\"\r\n          placeholder=\"Имя поьзователя\"\r\n          //validate={[requiredInput, correctInput]}\r\n          validate={[requiredInput]}\r\n        />\r\n        <Field className='form_title'\r\n          component={myInput}\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Пароль\"\r\n          validate={[requiredInput]}\r\n        />\r\n        <Field className='form_title'\r\n          component={myInput}\r\n          name=\"confirm-password\"\r\n          type=\"password\"\r\n          placeholder=\"Подтвердите пароль\"\r\n          validate={[requiredInput, matchInput]}\r\n        />\r\n        <button className=\"form_button\" type=\"submit\" label=\"submit\">Вход</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nLoginForm = reduxForm ({\r\n  form: 'login',\r\n}) (LoginForm);\r\n\r\nexport default LoginForm;","import React, {Component, Fragment} from 'react';\r\nimport LoginForm from '../components/LoginForm';\r\nimport {SubmissionError} from 'redux-form';\r\n\r\nclass App extends Component {\r\n  /* submit = values => {\r\n    window.alert (JSON.stringify (values));\r\n  }; */\r\n  submit = input=>{\r\n    if(['Настя', 'Леша', 'Миша', 'Света'].includes (input.username)){\r\n      throw new SubmissionError ({\r\n        username : \"Имя пользователя уже существует\",\r\n      });\r\n    }else{\r\n      console.log(JSON.stringify(input));\r\n      window.alert (JSON.stringify(input));\r\n    }\r\n};\r\n\r\n  getInitialValues () {\r\n    return {\r\n      username: '',\r\n      password: '',\r\n    };\r\n  }\r\n  render () {\r\n    return (\r\n      <Fragment>\r\n        <h1 className='header'>Redux Form</h1>\r\n        <LoginForm onSubmit={this.submit}\r\n         initialValues={this.getInitialValues()}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {createStore, combineReducers} from 'redux';\nimport {reducer as formReducer} from 'redux-form';\n\nconst reducers = {form: formReducer};\nconst reducer = combineReducers(reducers);\nlet store = createStore(reducer);\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}